@page "/"
@using NameApi.Models
@inject HttpClient Http

<div class="container">
    <div class="card m-4">
        <div class="card-header container-fluid">
            <div class="row">
                <div class="col-md-8">
                    <h1 class="card-title">Names</h1>
                </div>
                <div class="col-md-4 row">
                    <button class="btn btn-primary align-self-center ml-md-auto ml-3">Add New</button>
                </div>
            </div>
        </div>

        <div class="card-body p-4">
            @if (HasNoNames)
            {
                <p>There are currently no saved names. Please add some.</p>
            }
            else if (pagedNames == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th class="w-50">Name</th>
                            <th class="w-50">Date Created</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var name in pagedNames.PagedItems)
                        {
                            <tr>
                                <td class="w-50">@name.Name</td>
                                <td class="w-50">@name.DateCreated.ToLocalTime().ToString()</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="row h-100">
                    <div class="col-sm-12 col-md-6 my-auto">
                        @pagedNames.PagingDescription
                    </div>
                    <div class="col-sm-12 col-md-6">
                        <ul class="pagination float-md-right">
                            @if (pagedNames.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <button class="page-link" @onclick="pagedNames.PagePrevious">
                                        <span aria-hidden="true">&laquo;</span>
                                        <span class="sr-only">Previous</span>
                                    </button>
                                </li>
                            }

                            <li class="page-item active">
                                <a href="#" class="page-link">
                                    @pagedNames.CurrentPage <span class="sr-only">(current)</span>
                                </a>
                            </li>

                            @if (pagedNames.HasNextPage)
                            {
                                <li class="page-item">
                                    <button class="page-link" @onclick="pagedNames.PageNext">
                                        <span aria-hidder="true">&raquo;</span>
                                        <span class="sr-only">Previous</span>
                                    </button>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Paged<NameResponseModel> pagedNames;
    private bool HasNoNames;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("api/name");
        response.EnsureSuccessStatusCode();

        switch (response.StatusCode)
        {
            case System.Net.HttpStatusCode.NoContent:
                HasNoNames = true;
                break;
            case System.Net.HttpStatusCode.OK:
                var names = await response.Content.ReadFromJsonAsync<NameResponseModel[]>();
                pagedNames = new Paged<NameResponseModel>(names);
                break;
            default:
                throw new System.Net.WebException("Unexpected HTTP status code received.");
        }
    }
}
